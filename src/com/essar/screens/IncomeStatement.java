/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.essar.screens;

import com.essar.dao.CustomerDAO;
import com.essar.dao.DayBookDAO;
import com.essar.dao.IncomeExpenseDAO;
import com.essar.dao.PricingTierDAO;
import com.essar.dao.ProductCategoryDAO;
import com.essar.pojos.Customer;
import com.essar.pojos.DayBook;
import com.essar.pojos.IncomeExpense;
import com.essar.pojos.PricingTier;
import com.essar.utils.TableMouseListener;
import com.essar.pojos.ProductCategory;
import com.essar.utils.GenericUtils;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author rahumathulla
 */
public class IncomeStatement extends javax.swing.JFrame implements ActionListener{

    /**
     * Creates new form ProductCategory
     */
    long dayBookid=0;
    DefaultTableModel dayBookModel = null;
    DecimalFormat df = new DecimalFormat("##,##,###.##");
    String sqlDatePattern = "yyyy-MM-dd";
    SimpleDateFormat sqlDateFormat = new SimpleDateFormat(sqlDatePattern);
    public IncomeStatement() {
        initComponents();
        initializeForm();
        this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/images/tienda.png")));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        mnuCustomer = new javax.swing.JPopupMenu();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        mitDelete = new javax.swing.JMenuItem();
        mitEdit = new javax.swing.JMenuItem();
        pnlDayBook = new javax.swing.JPanel();
        panDayBook = new javax.swing.JScrollPane();
        tblDayBook = new javax.swing.JTable();
        lblTotalCredit = new javax.swing.JLabel();
        lblTotalDebit = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        lblBalance = new javax.swing.JLabel();
        btnCancel = new javax.swing.JButton();
        lblHeading = new javax.swing.JLabel();
        lblCount = new javax.swing.JLabel();
        lblCustomerName = new javax.swing.JLabel();
        dtpFromDate = new com.toedter.calendar.JDateChooser();
        lblCustomerName1 = new javax.swing.JLabel();
        dtpToDate = new com.toedter.calendar.JDateChooser();
        btnSearch = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable2);

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        mitDelete.setText("jMenuItem1");

        mitEdit.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Income Statement");
        setName("frmProductCategory"); // NOI18N

        tblDayBook.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Date", "Particular Name", "Debit", "Credit", "Remarks", "id"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        panDayBook.setViewportView(tblDayBook);

        lblTotalCredit.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblTotalCredit.setForeground(new java.awt.Color(0, 102, 0));
        lblTotalCredit.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblTotalCredit.setText("Cr Total");

        lblTotalDebit.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblTotalDebit.setForeground(new java.awt.Color(204, 0, 0));
        lblTotalDebit.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblTotalDebit.setText("Dr Total");

        lblBalance.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblBalance.setForeground(new java.awt.Color(0, 102, 204));
        lblBalance.setText("Balance: ");

        btnCancel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cancel.png"))); // NOI18N
        btnCancel.setMnemonic('C');
        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        lblHeading.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N

        lblCount.setForeground(new java.awt.Color(102, 102, 255));
        lblCount.setText("Count:");

        javax.swing.GroupLayout pnlDayBookLayout = new javax.swing.GroupLayout(pnlDayBook);
        pnlDayBook.setLayout(pnlDayBookLayout);
        pnlDayBookLayout.setHorizontalGroup(
            pnlDayBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDayBookLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlDayBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlDayBookLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(lblTotalDebit, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblTotalCredit, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(314, 314, 314))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlDayBookLayout.createSequentialGroup()
                        .addComponent(jSeparator1)
                        .addContainerGap())
                    .addGroup(pnlDayBookLayout.createSequentialGroup()
                        .addComponent(panDayBook, javax.swing.GroupLayout.PREFERRED_SIZE, 924, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(pnlDayBookLayout.createSequentialGroup()
                .addGap(336, 336, 336)
                .addComponent(lblBalance)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(pnlDayBookLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblCount, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(112, 112, 112)
                .addComponent(lblHeading, javax.swing.GroupLayout.PREFERRED_SIZE, 535, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlDayBookLayout.setVerticalGroup(
            pnlDayBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDayBookLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlDayBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblCount)
                    .addComponent(lblHeading, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panDayBook, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlDayBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlDayBookLayout.createSequentialGroup()
                        .addGroup(pnlDayBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblTotalCredit, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblTotalDebit, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblBalance))
                    .addComponent(btnCancel))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        lblCustomerName.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblCustomerName.setText("From");

        dtpFromDate.setDateFormatString("dd/MM/yyyy");

        lblCustomerName1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblCustomerName1.setText("To");

        dtpToDate.setDateFormatString("dd/MM/yyyy");

        btnSearch.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/search.png"))); // NOI18N
        btnSearch.setMnemonic('e');
        btnSearch.setText("Go");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlDayBook, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 6, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnSearch)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblCustomerName, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblCustomerName1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(120, 120, 120)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dtpToDate, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dtpFromDate, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(lblCustomerName, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(dtpFromDate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dtpToDate, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCustomerName1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSearch)
                .addGap(35, 35, 35)
                .addComponent(pnlDayBook, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        String fromDate = sqlDateFormat.format(dtpFromDate.getDate());
        String toDate = sqlDateFormat.format(dtpToDate.getDate());
        DayBookDAO dayBookDAO = new DayBookDAO();
        renderDataIntoTable(dayBookDAO.retrieveDayBookEntriesInDateRange(dtpFromDate.getDate(), dtpToDate.getDate()));
        int fromMonth =0;
        int fromDay =0;
        int fromYear=0;
        int toMonth=0;
        int toDay=0;
        int toYear=0;
        Calendar fromCal = dtpFromDate.getCalendar();
        Calendar toCal = dtpToDate.getCalendar();
        fromDay = fromCal.get(Calendar.DAY_OF_MONTH);
        fromMonth = fromCal.get(Calendar.MONTH);
        fromYear = fromCal.get(Calendar.YEAR);
        
        toDay = toCal.get(Calendar.DAY_OF_MONTH);
        toMonth = toCal.get(Calendar.MONTH);
        toYear = toCal.get(Calendar.YEAR);
        
        
        String[] MONTHS = {"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"};
        System.out.println("--"+fromDay+"//"+fromMonth+"//"+fromYear);
        lblHeading.setText("Income Statement for the period : "+fromDay+"-"+MONTHS[fromMonth]+"-"+fromYear+" to "
                    +toDay+"-"+MONTHS[toMonth]+"-"+toYear);
    }//GEN-LAST:event_btnSearchActionPerformed
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IncomeStatement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IncomeStatement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IncomeStatement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IncomeStatement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</etxtRemarks>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</etxtRemarks>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</etxtRemarks>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</etxtRemarks>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</etxtRemarks>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</etxtRemarks>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</etxtRemarks>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</etxtRemarks>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IncomeStatement().setVisible(true);
            }
        });
    }
    
    public void initializeForm(){
        DefaultTableModel model = (DefaultTableModel) tblDayBook.getModel();
        model.setRowCount(0);
        
        if(null==dtpFromDate.getDate()){
            //dtpFromDate.setDate(new Date());
            Calendar cal = Calendar.getInstance();
            System.out.println("Today : " + cal.getTime());
            cal.add(Calendar.DATE, -30);
           
            System.out.println("30 days ago: " + cal.getTime());
            dtpFromDate.setDate(cal.getTime());
            // Substract 30 days from the calendar
            //dtpFromDate.setDate(new Date(cal.add(Calendar.DATE, -30)));
        }        if(null==dtpToDate.getDate()){
            dtpToDate.setDate(new Date());
        }
        

        mnuCustomer = new JPopupMenu();
        
        mitEdit = new JMenuItem("Edit");
        mitEdit.addActionListener(this);
        
        mitDelete = new JMenuItem("Delete");
        mitDelete.addActionListener(this);
        
        mnuCustomer.add(mitEdit);
        mnuCustomer.add(mitDelete);
         // sets the popup menu for the table
        tblDayBook.setComponentPopupMenu(mnuCustomer);      
        tblDayBook.addMouseListener(new TableMouseListener(tblDayBook));
        
        TableColumn idColumn1 = tblDayBook.getColumnModel().getColumn(tblDayBook.getColumnCount()-1);
        idColumn1.setPreferredWidth(0);
        idColumn1.setMinWidth(0);
        idColumn1.setMaxWidth(0);
        
        TableColumn remarksColumn = tblDayBook.getColumnModel().getColumn(tblDayBook.getColumnCount()-2);
        remarksColumn.setPreferredWidth(300);
        remarksColumn.setMinWidth(300);
        remarksColumn.setMaxWidth(300);
        
        TableColumn itemNameColumn = tblDayBook.getColumnModel().getColumn(1);
        itemNameColumn.setPreferredWidth(300);
        itemNameColumn.setMinWidth(300);
        itemNameColumn.setMaxWidth(300);

        
        dayBookid = 0;
    }
    
    public void enableFormElements(boolean flag){
        dtpFromDate.setEnabled(flag);
        dtpToDate.setEnabled(flag);
    }
    public boolean validateForm(){
       
        if(null == dtpFromDate.getDate()){
            JOptionPane.showMessageDialog(null, "Please select a date.");
            dtpFromDate.requestFocus();
            return false;
        }
             
        //txtProductCategoryName.setText("");
        return true;
    }
    
    public void saveDayBookForm(){
 
       
    }
    public void updateDayBookForm(){
 
        
        
    }
    
    public void renderParticularsDataIntoDropDown(List<IncomeExpense> incomeExpenseList){
       
    }
    public void recalculateIncomeExpenceSummary(){
        double totalDebit =0;
        double totalCredit=0;
        for(int i=0;i<dayBookModel.getRowCount();i++){
            String dr =tblDayBook.getValueAt(i, 2).toString();
            String cr =tblDayBook.getValueAt(i, 3).toString();
            if(Double.parseDouble(cr)>0)
                totalCredit = totalCredit + Double.parseDouble(cr);
            else
                totalDebit = totalDebit + Double.parseDouble(dr);
        //model.
        }        
        lblTotalCredit.setText(df.format(totalCredit));
        lblTotalDebit.setText(df.format(totalDebit));
        lblBalance.setText("Balance : "+df.format((totalCredit-totalDebit))+"");
    }
    public void renderDataIntoTable(List<DayBook> dayBookList){
        
        tblDayBook.removeAll();
        tblDayBook.repaint();
        DefaultTableModel model = (DefaultTableModel) tblDayBook.getModel();
        model.setRowCount(0);
        
        dayBookModel = (DefaultTableModel) tblDayBook.getModel();
        TableColumn column = tblDayBook.getColumnModel().getColumn(tblDayBook.getColumnCount()-1);
        column.setMaxWidth(0);
        column.setWidth(0);
        column.setPreferredWidth(0);
        lblCount.setText("Count : "+dayBookList.size());
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        //pricingTierModel.getColumnName(3).
        //System.out.println("-----"+pricingTierList.size());
        double totalDebit =0;
        double totalCredit=0;
        for(int i=0;i<dayBookList.size();i++){
            dayBookModel.addRow(new Object[]{sdf.format(dayBookList.get(i).getEventDate()),dayBookList.get(i).getParticularName(),dayBookList.get(i).getDebitAmount(),dayBookList.get(i).getCreditAmount(), dayBookList.get(i).getRemarks(), dayBookList.get(i).getDayBookId()});
            totalCredit = totalCredit + dayBookList.get(i).getCreditAmount();
            totalDebit = totalDebit + dayBookList.get(i).getDebitAmount();
        //model.
        }        
        lblTotalCredit.setText(df.format(totalCredit));
        lblTotalDebit.setText(df.format(totalDebit));
        lblBalance.setText("Balance : "+df.format((totalCredit-totalDebit))+"");
        
        tblDayBook.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent me) {
                if (me.getClickCount() == 2) {     // to detect doble click events
                    syncDataFromViewToTable();
                }
            }
        });
    }
    
    public void syncDataFromViewToTable(){
        enableFormElements(true);
        DayBook dayBook = null;
        System.out.println("--------INSIDE Edit-"+tblDayBook.getModel().getValueAt(tblDayBook.getSelectedRow(),1));
        dayBookid = Integer.parseInt(tblDayBook.getModel().getValueAt(tblDayBook.getSelectedRow(),tblDayBook.getColumnCount()-1).toString());
        DayBookDAO dayBookDAO = new DayBookDAO();
        dayBook = dayBookDAO.retrieveById(dayBookid);
        System.out.println("--"+dayBook.getParticularName());
        //txtAmount.setText(dayBook.getIncomeExpenseName());

        //=========Retrieving all Particulars and setting the appropriated one as selected.

        //**************
        dtpFromDate.setDate(dayBook.getEventDate());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnSearch;
    private com.toedter.calendar.JDateChooser dtpFromDate;
    private com.toedter.calendar.JDateChooser dtpToDate;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JLabel lblBalance;
    private javax.swing.JLabel lblCount;
    private javax.swing.JLabel lblCustomerName;
    private javax.swing.JLabel lblCustomerName1;
    private javax.swing.JLabel lblHeading;
    private javax.swing.JLabel lblTotalCredit;
    private javax.swing.JLabel lblTotalDebit;
    private javax.swing.JMenuItem mitDelete;
    private javax.swing.JMenuItem mitEdit;
    private javax.swing.JPopupMenu mnuCustomer;
    private javax.swing.JScrollPane panDayBook;
    private javax.swing.JPanel pnlDayBook;
    private javax.swing.JTable tblDayBook;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent event) {
        try{
            JMenuItem menu = (JMenuItem) event.getSource();
            if (menu == mitDelete) {
              //txtParticularName= tblIncomeExpense.getSelectedRow();
                System.out.println("--------INSIDE DELETE-"+tblDayBook.getModel().getValueAt(tblDayBook.getSelectedRow(),0));
                String dayBookId = tblDayBook.getModel().getValueAt(tblDayBook.getSelectedRow(),tblDayBook.getColumnCount()-1).toString();
                long id = Long.parseLong(dayBookId);
                //DayBookDAO dayBookDAO = new DayBookDAO();
                //dayBookDAO.deleteRecordById(id);
                GenericUtils.removeRowFromJTable(tblDayBook, dayBookModel);
                recalculateIncomeExpenceSummary();
            }
            if (menu == mitEdit) {
                //int rowIndex = tblSupplier.getSelectedRow();
                syncDataFromViewToTable();
               
                //btnSave.setText("Save");
                //btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/save.png")));
                //btnSave.setText("Update");
                //btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/update.png")));
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
        
    }
}
